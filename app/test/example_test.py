""" Set of assert Examples """
import unittest


class MyTestCase(unittest.TestCase):
    """ Set of assert examples """

    def test_assert_rises(self):
        """Test for  an exception generated by a list"""
        with self.assertRaises(AttributeError):
            raise AttributeError

    def test_assert_equal(self):
        """ test_assert_equal """
        self.assertEqual(1, 1)

    def test_assert_almost_equal_delta_0_5(self):
        """ test_assert_almost_equal_delta_0_5 """
        self.assertAlmostEqual(1, 1.2, delta=0.5)

    def test_assert_almost_equal_places(self):
        """ test_assert_almost_equal_places """
        self.assertAlmostEqual(1, 1.00001, places=4)

    def test_assert_raises(self):
        """ test_assert_raises """
        self.assertRaises(ValueError, int, "a")
        self.assertRaises(IndexError, [].pop, 0)

    def test_assert_raises_alternative(self):
        """ test_assert_raises_alternative """
        with self.assertRaises(AttributeError):
            raise AttributeError

    def test_assert_dict_equal(self):
        """ test_assert_dict_equal """
        expected = {'a': 'b', 'c': 'd', 'e': 'f'}
        actual = {'a': 'b', 'c': 'd', 'e': 'f'}
        self.assertDictEqual(expected, actual)

    def test_assert_true(self):
        """ test_assert_true """
        self.assertTrue(1 + 1 == 2)

    def test_assert_greater(self):
        """ test_assert_greater """
        self.assertGreater(2, 1)

    def test_assert_greater_equal(self):
        """ test_assert_greater_equal """
        self.assertGreaterEqual(2, 2)

    def test_assert_in(self):
        """ test_assert_in """
        self.assertIn(1, [1, 2, 3])

    def test_assert_is(self):
        """ test_assert_is """
        self.assertIs(1, 1)

    def test_assert_is_instance(self):
        """ test_assert_is_instance """
        self.assertIsInstance(1, int)

    def test_assert_not_is_instance(self):
        """ test_assert_not_is_instance """
        self.assertNotIsInstance({}, set)

    def test_assert_is_none(self):
        """ test_assert_is_none """
        self.assertIsNone(None)

    def test_assert_is_not(self):
        """ test_assert_is_not """
        self.assertIsNot([], [])

    def test_assert_is_not_none(self):
        """ test_assert_is_not_none """
        self.assertIsNotNone(1)

    def test_assert_less(self):
        """ test_assert_less """
        self.assertLess(1, 2)

    def test_assert_less_equal(self):
        """ test_assert_less_equal """
        self.assertLessEqual(2, 2)

    def test_assert_count_equal(self):
        """ test_assert_count_equal """
        self.assertCountEqual([1, 2, 3], [1, 3, 2])


if __name__ == '__main__':  # pragma: no cover
    unittest.main()
